// <auto-generated />
using System;
using AscendNutrition.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AscendNutrition.Data.Migrations
{
    [DbContext(typeof(AscendNutritionDbContext))]
    [Migration("20241202164100_ProductDataAdded")]
    partial class ProductDataAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AscendNutrition.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The address of the user");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasComment("The city of the user");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First name of the user");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Last name of the user");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int")
                        .HasComment("The post code for the city");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AscendNutrition.Data.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the categories");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the category");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of a possible parent category");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f7b59f52-b9e3-4d7e-ae9b-9071d17a6491"),
                            Name = "Protein Powder"
                        },
                        new
                        {
                            Id = new Guid("91cb01ef-7d82-44a9-8a58-2bb07d3ed712"),
                            Name = "Vitamins"
                        },
                        new
                        {
                            Id = new Guid("c3c5b715-3d74-4af0-81e3-0d6b5c7e8b5a"),
                            Name = "Vegan Protein",
                            ParentCategoryId = new Guid("f7b59f52-b9e3-4d7e-ae9b-9071d17a6491")
                        },
                        new
                        {
                            Id = new Guid("f3d32764-e0ef-4f56-b9bb-902d1ac6b76f"),
                            Name = "Casein Protein",
                            ParentCategoryId = new Guid("f7b59f52-b9e3-4d7e-ae9b-9071d17a6491")
                        },
                        new
                        {
                            Id = new Guid("ed752a96-cafa-4aa3-adc7-a491b5caa2df"),
                            Name = "Pre-workout"
                        },
                        new
                        {
                            Id = new Guid("2d15e952-dcab-477d-a3d2-1798a500d07b"),
                            Name = "Creatine"
                        },
                        new
                        {
                            Id = new Guid("1383fe7e-0601-4ed2-8048-f6ea2db24346"),
                            Name = "Beta-alanine",
                            ParentCategoryId = new Guid("ed752a96-cafa-4aa3-adc7-a491b5caa2df")
                        },
                        new
                        {
                            Id = new Guid("017dc22c-7960-4ef9-88db-2fa6c68399f8"),
                            Name = "Citruline-Malate",
                            ParentCategoryId = new Guid("ed752a96-cafa-4aa3-adc7-a491b5caa2df")
                        });
                });

            modelBuilder.Entity("AscendNutrition.Data.Models.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the inventory");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasComment("The city in which the inventory is");

                    b.HasKey("Id");

                    b.ToTable("Inventories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e098a6b8-60d9-4f30-91d6-85eab6e5274b"),
                            City = "Varna"
                        },
                        new
                        {
                            Id = new Guid("1b48c8b4-b7f6-4354-9463-7cb9e084ae9c"),
                            City = "Sofia"
                        },
                        new
                        {
                            Id = new Guid("c68295f6-b5bb-4224-8516-877b57858f58"),
                            City = "Burgas"
                        });
                });

            modelBuilder.Entity("AscendNutrition.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the order");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the customer who made the order");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasComment("The day in which the order was made");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int")
                        .HasComment("Shows the status of the order");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int")
                        .HasComment("Shows the way in which the order will be paid");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The total price of the order");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AscendNutrition.Data.Models.OrderItem", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price per single unit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("The quantity of the product");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("AscendNutrition.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the product in the database");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the product's brand");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the category");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("A description about the product");

                    b.Property<int?>("Flavour")
                        .HasColumnType("int")
                        .HasComment("Enum for the product's flavour");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("An url to the image illustrating the product");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the product");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The price of a single product");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Available quantity of the product");

                    b.Property<int>("Servings")
                        .HasColumnType("int")
                        .HasComment("Quantity of servings per container");

                    b.Property<int?>("Size")
                        .HasColumnType("int")
                        .HasComment("Enum for the product sizes");

                    b.Property<int>("Suitability")
                        .HasColumnType("int")
                        .HasComment("Enum for the different dietary suitabilities of the products");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77a25d79-6b37-4e35-8601-bae2a5a68a1e"),
                            Brand = "MuscleTech",
                            CategoryId = new Guid("f7b59f52-b9e3-4d7e-ae9b-9071d17a6491"),
                            Description = "Fuel your muscles and support recovery with whey protein – a high-quality, fast-absorbing protein source ideal for building strength and optimizing performance.",
                            Flavour = 3,
                            ImageUrl = "images/muscletech2.5kg.jpg",
                            Name = "Whey Protein",
                            Price = 119.99m,
                            Quantity = 200,
                            Servings = 83,
                            Size = 4,
                            Suitability = 0
                        },
                        new
                        {
                            Id = new Guid("c595c905-76ae-4ab2-950d-b54c6e3ac6f2"),
                            Brand = "MyProtein",
                            CategoryId = new Guid("c3c5b715-3d74-4af0-81e3-0d6b5c7e8b5a"),
                            Description = "Power your body with vegan protein – a plant-based, nutrient-rich supplement designed to support muscle growth and recovery while aligning with your lifestyle.",
                            Flavour = 0,
                            ImageUrl = "images/mpveganprotein1kg.jpg",
                            Name = "Vegan Protein Blend",
                            Price = 79.99m,
                            Quantity = 120,
                            Servings = 33,
                            Size = 2,
                            Suitability = 1
                        },
                        new
                        {
                            Id = new Guid("8e3e7e16-1b45-4f0c-a9f4-c48d5c49f9a9"),
                            Brand = "OstroVit",
                            CategoryId = new Guid("2d15e952-dcab-477d-a3d2-1798a500d07b"),
                            Description = "Enhance your strength, endurance, and muscle recovery with creatine monohydrate – a scientifically backed supplement designed to boost energy production during intense workouts.",
                            Flavour = 0,
                            ImageUrl = "images/creatine500g.jpg",
                            Name = "Creatine Monohydrate",
                            Price = 49.99m,
                            Quantity = 500,
                            Servings = 100,
                            Size = 1,
                            Suitability = 0
                        },
                        new
                        {
                            Id = new Guid("7f7a9d00-d6e2-4ff3-a608-f3dfc0e329ea"),
                            Brand = "C4",
                            CategoryId = new Guid("ed752a96-cafa-4aa3-adc7-a491b5caa2df"),
                            Description = "Boost your energy, focus, and performance with a pre-workout – a powerful formula designed to maximize your workouts and help you push past your limits.",
                            Flavour = 0,
                            ImageUrl = "images/c4500g.jpg",
                            Name = "Cellucor Original",
                            Price = 41.99m,
                            Quantity = 1000,
                            Servings = 30,
                            Size = 1,
                            Suitability = 0
                        },
                        new
                        {
                            Id = new Guid("a4fab9f7-f65f-48bc-8c0e-0ebbdf042a26"),
                            Brand = "NOW Foods",
                            CategoryId = new Guid("91cb01ef-7d82-44a9-8a58-2bb07d3ed712"),
                            Description = "Support bone health, immune function, and cardiovascular wellness with Vitamin D3+K2 – a synergistic blend essential for calcium absorption and overall vitality.",
                            Flavour = 0,
                            ImageUrl = "images/d3k2120caps.png",
                            Name = "Vitamin D3+K2",
                            Price = 36m,
                            Quantity = 700,
                            Servings = 120,
                            Suitability = 0
                        },
                        new
                        {
                            Id = new Guid("abf4b934-54e0-4d1d-a049-9d5b349f2215"),
                            Brand = "Lazar Angelov Nutrition",
                            CategoryId = new Guid("1383fe7e-0601-4ed2-8048-f6ea2db24346"),
                            Description = "Elevate your endurance and delay muscle fatigue with beta-alanine – a performance-boosting supplement ideal for high-intensity workouts.",
                            Flavour = 0,
                            ImageUrl = "images/betaalanine300g.jpg",
                            Name = "LA Beta-Alanine Powder",
                            Price = 39.99m,
                            Quantity = 250,
                            Servings = 150,
                            Size = 0,
                            Suitability = 0
                        },
                        new
                        {
                            Id = new Guid("706f88ae-c72d-43e6-b5da-ba1db33f2401"),
                            Brand = "Optimum Nutrition",
                            CategoryId = new Guid("f3d32764-e0ef-4f56-b9bb-902d1ac6b76f"),
                            Description = "Fuel your muscles overnight with casein protein – a slow-digesting protein designed to support recovery and sustained muscle growth.",
                            Flavour = 0,
                            ImageUrl = "images/casein1kg.jpg",
                            Name = "Gold Standard 100% Casein",
                            Price = 39.99m,
                            Quantity = 120,
                            Servings = 26,
                            Size = 2,
                            Suitability = 0
                        },
                        new
                        {
                            Id = new Guid("fc0ec8a8-c0eb-433f-8a2b-fe5ee65e8457"),
                            Brand = "AllNutrition",
                            CategoryId = new Guid("f7b59f52-b9e3-4d7e-ae9b-9071d17a6491"),
                            Description = "Enjoy the benefits of whey protein without the discomfort with lactose-free whey protein – a high-quality, easy-to-digest supplement perfect for muscle recovery and growth.",
                            Flavour = 1,
                            ImageUrl = "images/lactosefree1kg.jpg",
                            Name = "Lactose Free Protein",
                            Price = 59.99m,
                            Quantity = 120,
                            Servings = 23,
                            Size = 2,
                            Suitability = 4
                        },
                        new
                        {
                            Id = new Guid("ff3bbd2a-05a0-44eb-ab2b-1408b1fdd55b"),
                            Brand = "Kevin Levrone",
                            CategoryId = new Guid("91cb01ef-7d82-44a9-8a58-2bb07d3ed712"),
                            Description = "Fill nutritional gaps and support overall health with multivitamins – a comprehensive blend of essential vitamins and minerals for daily wellness.",
                            Flavour = 0,
                            ImageUrl = "images/multivitamin90.jpg",
                            Name = "Anabolic Vita Formula",
                            Price = 28.99m,
                            Quantity = 1000,
                            Servings = 30,
                            Suitability = 0
                        },
                        new
                        {
                            Id = new Guid("06c95860-1d05-452a-a15a-a18c3e104d3b"),
                            Brand = "OstroVit",
                            CategoryId = new Guid("1383fe7e-0601-4ed2-8048-f6ea2db24346"),
                            Description = "Enhance blood flow and reduce muscle fatigue with citrulline malate – a powerful pre-workout ingredient that boosts endurance and improves exercise performance.",
                            Flavour = 1,
                            ImageUrl = "images/citruline300g.jpg",
                            Name = "Citrulline Malate Powder",
                            Price = 36.95m,
                            Quantity = 1050,
                            Servings = 30,
                            Suitability = 0
                        });
                });

            modelBuilder.Entity("AscendNutrition.Data.Models.ProductInventory", b =>
                {
                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("InventoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductInventories");
                });

            modelBuilder.Entity("AscendNutrition.Data.Models.ProductPromotion", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "PromotionId");

                    b.HasIndex("PromotionId");

                    b.ToTable("ProductPromotions");
                });

            modelBuilder.Entity("AscendNutrition.Data.Models.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the promotion");

                    b.Property<int>("DiscountPercentage")
                        .HasColumnType("int")
                        .HasComment("The percentage that will be applied to the products");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("The end of the promotion");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The name of the promotion");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("The beginning of the promotion");

                    b.HasKey("Id");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("AscendNutrition.Data.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the review");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Additional comment to the review");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasComment("Enum for the rating of the product");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2")
                        .HasComment("The day on which the review was made");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AscendNutrition.Data.Models.Category", b =>
                {
                    b.HasOne("AscendNutrition.Data.Models.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("AscendNutrition.Data.Models.Order", b =>
                {
                    b.HasOne("AscendNutrition.Data.Models.ApplicationUser", "Customer")
                        .WithMany("PurchaseHistory")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AscendNutrition.Data.Models.OrderItem", b =>
                {
                    b.HasOne("AscendNutrition.Data.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AscendNutrition.Data.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AscendNutrition.Data.Models.Product", b =>
                {
                    b.HasOne("AscendNutrition.Data.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AscendNutrition.Data.Models.ProductInventory", b =>
                {
                    b.HasOne("AscendNutrition.Data.Models.Inventory", "Inventory")
                        .WithMany("ProductInventories")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AscendNutrition.Data.Models.Product", "Product")
                        .WithMany("ProductInventories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AscendNutrition.Data.Models.ProductPromotion", b =>
                {
                    b.HasOne("AscendNutrition.Data.Models.Product", "Product")
                        .WithMany("ProductPromotions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AscendNutrition.Data.Models.Promotion", "Promotion")
                        .WithMany("ProductPromotions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("AscendNutrition.Data.Models.Review", b =>
                {
                    b.HasOne("AscendNutrition.Data.Models.ApplicationUser", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AscendNutrition.Data.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("AscendNutrition.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("AscendNutrition.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AscendNutrition.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("AscendNutrition.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AscendNutrition.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("PurchaseHistory");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("AscendNutrition.Data.Models.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("AscendNutrition.Data.Models.Inventory", b =>
                {
                    b.Navigation("ProductInventories");
                });

            modelBuilder.Entity("AscendNutrition.Data.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("AscendNutrition.Data.Models.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProductInventories");

                    b.Navigation("ProductPromotions");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("AscendNutrition.Data.Models.Promotion", b =>
                {
                    b.Navigation("ProductPromotions");
                });
#pragma warning restore 612, 618
        }
    }
}
